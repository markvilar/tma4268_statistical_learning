geom_abline(intercept = 0, slope = 1, linetype = "dotted") +
labs(x = "Theoretical quantiles", y = "Standardized residuals",
title = "Normal Q-Q plot for model B")
# Plotting the fitted values vs. standardized residuals for model A
ggplot(modelA, aes(.fitted, .stdresid)) +
geom_point(pch = 21) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_smooth(se = FALSE, col = "red", size = 0.5, method = "loess") +
labs(x = "Fitted values", y = "Standardized residuals",
title = "Fitted values vs. standardized residuals for model A")
# Plotting the fitted values vs. standardized residuals for model B
ggplot(modelB, aes(.fitted, .stdresid)) +
geom_point(pch = 21) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_smooth(se = FALSE, col = "red", size = 0.5, method = "loess") +
labs(x = "Fitted values", y = "Standardized residuals",
title = "Fitted values vs. standardized residuals for model B")
library(ggplot2)
# Setting up a linear regression model for each of the response variables
modelA = lm(formula = price ~ carat + cut + color + clarity +
depth + table + xx + yy + zz, data=dtrain)
modelB = lm(formula = logprice ~ carat + cut + color + clarity +
depth + table + xx + yy + zz, data=dtrain)
# Creating QQ-plot for model A
plot1 = ggplot(modelA, aes(sample = .stdresid)) +
stat_qq(pch = 19) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +
labs(x = "Theoretical quantiles", y = "Standardized residuals",
title = "Normal Q-Q plot for model A")
# Creating QQ-plot for model B
plot2 = ggplot(modelB, aes(sample = .stdresid)) +
stat_qq(pch = 19) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +
labs(x = "Theoretical quantiles", y = "Standardized residuals",
title = "Normal Q-Q plot for model B")
# Plotting the fitted values vs. standardized residuals for model A
plot3 = ggplot(modelA, aes(.fitted, .stdresid)) +
geom_point(pch = 21) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_smooth(se = FALSE, col = "red", size = 0.5, method = "loess") +
labs(x = "Fitted values", y = "Standardized residuals",
title = "Fitted values vs. standardized residuals for model A")
# Plotting the fitted values vs. standardized residuals for model B
plot4 = ggplot(modelB, aes(.fitted, .stdresid)) +
geom_point(pch = 21) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_smooth(se = FALSE, col = "red", size = 0.5, method = "loess") +
labs(x = "Fitted values", y = "Standardized residuals",
title = "Fitted values vs. standardized residuals for model B")
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
install.packages("grid")
install.packages("grid")
library(ggplot2)
library(grid)
# Setting up a linear regression model for each of the response variables
modelA = lm(formula = price ~ carat + cut + color + clarity +
depth + table + xx + yy + zz, data=dtrain)
modelB = lm(formula = logprice ~ carat + cut + color + clarity +
depth + table + xx + yy + zz, data=dtrain)
# Creating QQ-plot for model A
plot1 = ggplot(modelA, aes(sample = .stdresid)) +
stat_qq(pch = 19) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +
labs(x = "Theoretical quantiles", y = "Standardized residuals",
title = "Normal Q-Q plot for model A")
# Creating QQ-plot for model B
plot2 = ggplot(modelB, aes(sample = .stdresid)) +
stat_qq(pch = 19) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +
labs(x = "Theoretical quantiles", y = "Standardized residuals",
title = "Normal Q-Q plot for model B")
# Plotting the fitted values vs. standardized residuals for model A
plot3 = ggplot(modelA, aes(.fitted, .stdresid)) +
geom_point(pch = 21) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_smooth(se = FALSE, col = "red", size = 0.5, method = "loess") +
labs(x = "Fitted values", y = "Standardized residuals",
title = "Fitted values vs. standardized residuals for model A")
# Plotting the fitted values vs. standardized residuals for model B
plot4 = ggplot(modelB, aes(.fitted, .stdresid)) +
geom_point(pch = 21) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_smooth(se = FALSE, col = "red", size = 0.5, method = "loess") +
labs(x = "Fitted values", y = "Standardized residuals",
title = "Fitted values vs. standardized residuals for model B")
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
library(ggplot2)
library(grid)
# Setting up a linear regression model for each of the response variables
modelA = lm(formula = price ~ carat + cut + color + clarity +
depth + table + xx + yy + zz, data=dtrain)
modelB = lm(formula = logprice ~ carat + cut + color + clarity +
depth + table + xx + yy + zz, data=dtrain)
# Creating QQ-plot for model A
plot1 = ggplot(modelA, aes(sample = .stdresid)) +
stat_qq(pch = 19) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +
labs(x = "Theoretical quantiles", y = "Standardized residuals",
title = "Normal Q-Q plot for model A")
# Creating QQ-plot for model B
plot2 = ggplot(modelB, aes(sample = .stdresid)) +
stat_qq(pch = 19) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +
labs(x = "Theoretical quantiles", y = "Standardized residuals",
title = "Normal Q-Q plot for model B")
# Plotting the fitted values vs. standardized residuals for model A
plot3 = ggplot(modelA, aes(.fitted, .stdresid)) +
geom_point(pch = 21) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_smooth(se = FALSE, col = "red", size = 0.5, method = "loess") +
labs(x = "Fitted values", y = "Standardized residuals",
title = "Fitted values vs. standardized residuals for model A")
# Plotting the fitted values vs. standardized residuals for model B
plot4 = ggplot(modelB, aes(.fitted, .stdresid)) +
geom_point(pch = 21) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_smooth(se = FALSE, col = "red", size = 0.5, method = "loess") +
labs(x = "Fitted values", y = "Standardized residuals",
title = "Fitted values vs. standardized residuals for model B")
grid.arrange(plot1, plot2, plot3, plot4, ncol = 4)
library(ggplot2)
library(grid)
# Setting up a linear regression model for each of the response variables
modelA = lm(formula = price ~ carat + cut + color + clarity +
depth + table + xx + yy + zz, data=dtrain)
modelB = lm(formula = logprice ~ carat + cut + color + clarity +
depth + table + xx + yy + zz, data=dtrain)
# Creating QQ-plot for model A
plot1 = ggplot(modelA, aes(sample = .stdresid)) +
stat_qq(pch = 19) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +
labs(x = "Theoretical quantiles", y = "Standardized residuals",
title = "Normal Q-Q plot for model A")
# Creating QQ-plot for model B
plot2 = ggplot(modelB, aes(sample = .stdresid)) +
stat_qq(pch = 19) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +
labs(x = "Theoretical quantiles", y = "Standardized residuals",
title = "Normal Q-Q plot for model B")
# Plotting the fitted values vs. standardized residuals for model A
plot3 = ggplot(modelA, aes(.fitted, .stdresid)) +
geom_point(pch = 21) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_smooth(se = FALSE, col = "red", size = 0.5, method = "loess") +
labs(x = "Fitted values", y = "Standardized residuals",
title = "Fitted values vs. standardized residuals for model A")
# Plotting the fitted values vs. standardized residuals for model B
plot4 = ggplot(modelB, aes(.fitted, .stdresid)) +
geom_point(pch = 21) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_smooth(se = FALSE, col = "red", size = 0.5, method = "loess") +
labs(x = "Fitted values", y = "Standardized residuals",
title = "Fitted values vs. standardized residuals for model B")
grid.arrange(plot1, plot2, plot3, plot4, ncol = 4)
library(ggplot2)
library(grid)
# Setting up a linear regression model for each of the response variables
modelA = lm(formula = price ~ carat + cut + color + clarity +
depth + table + xx + yy + zz, data=dtrain)
modelB = lm(formula = logprice ~ carat + cut + color + clarity +
depth + table + xx + yy + zz, data=dtrain)
# Creating QQ-plot for model A
plot1 = ggplot(modelA, aes(sample = .stdresid)) +
stat_qq(pch = 19) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +
labs(x = "Theoretical quantiles", y = "Standardized residuals",
title = "Normal Q-Q plot for model A")
# Creating QQ-plot for model B
plot2 = ggplot(modelB, aes(sample = .stdresid)) +
stat_qq(pch = 19) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +
labs(x = "Theoretical quantiles", y = "Standardized residuals",
title = "Normal Q-Q plot for model B")
# Plotting the fitted values vs. standardized residuals for model A
plot3 = ggplot(modelA, aes(.fitted, .stdresid)) +
geom_point(pch = 21) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_smooth(se = FALSE, col = "red", size = 0.5, method = "loess") +
labs(x = "Fitted values", y = "Standardized residuals",
title = "Fitted values vs. standardized residuals for model A")
# Plotting the fitted values vs. standardized residuals for model B
plot4 = ggplot(modelB, aes(.fitted, .stdresid)) +
geom_point(pch = 21) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_smooth(se = FALSE, col = "red", size = 0.5, method = "loess") +
labs(x = "Fitted values", y = "Standardized residuals",
title = "Fitted values vs. standardized residuals for model B")
grid::arrange(plot1, plot2, plot3, plot4, ncol = 4)
library(ggplot2)
library(grid)
# Setting up a linear regression model for each of the response variables
modelA = lm(formula = price ~ carat + cut + color + clarity +
depth + table + xx + yy + zz, data=dtrain)
modelB = lm(formula = logprice ~ carat + cut + color + clarity +
depth + table + xx + yy + zz, data=dtrain)
# Creating QQ-plot for model A
plot1 = ggplot(modelA, aes(sample = .stdresid)) +
stat_qq(pch = 19) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +
labs(x = "Theoretical quantiles", y = "Standardized residuals",
title = "Normal Q-Q plot for model A")
# Creating QQ-plot for model B
plot2 = ggplot(modelB, aes(sample = .stdresid)) +
stat_qq(pch = 19) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +
labs(x = "Theoretical quantiles", y = "Standardized residuals",
title = "Normal Q-Q plot for model B")
# Plotting the fitted values vs. standardized residuals for model A
plot3 = ggplot(modelA, aes(.fitted, .stdresid)) +
geom_point(pch = 21) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_smooth(se = FALSE, col = "red", size = 0.5, method = "loess") +
labs(x = "Fitted values", y = "Standardized residuals",
title = "Fitted values vs. standardized residuals for model A")
# Plotting the fitted values vs. standardized residuals for model B
plot4 = ggplot(modelB, aes(.fitted, .stdresid)) +
geom_point(pch = 21) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_smooth(se = FALSE, col = "red", size = 0.5, method = "loess") +
labs(x = "Fitted values", y = "Standardized residuals",
title = "Fitted values vs. standardized residuals for model B")
grid.arrange(plot1, plot2, plot3, plot4, ncol = 4)
library(ggplot2)
library(grid)
# Setting up a linear regression model for each of the response variables
modelA = lm(formula = price ~ carat + cut + color + clarity +
depth + table + xx + yy + zz, data=dtrain)
modelB = lm(formula = logprice ~ carat + cut + color + clarity +
depth + table + xx + yy + zz, data=dtrain)
# Creating QQ-plot for model A
plot1 = ggplot(modelA, aes(sample = .stdresid)) +
stat_qq(pch = 19) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +
labs(x = "Theoretical quantiles", y = "Standardized residuals",
title = "Normal Q-Q plot for model A")
# Creating QQ-plot for model B
plot2 = ggplot(modelB, aes(sample = .stdresid)) +
stat_qq(pch = 19) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +
labs(x = "Theoretical quantiles", y = "Standardized residuals",
title = "Normal Q-Q plot for model B")
# Plotting the fitted values vs. standardized residuals for model A
plot3 = ggplot(modelA, aes(.fitted, .stdresid)) +
geom_point(pch = 21) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_smooth(se = FALSE, col = "red", size = 0.5, method = "loess") +
labs(x = "Fitted values", y = "Standardized residuals",
title = "Fitted values vs. standardized residuals for model A")
# Plotting the fitted values vs. standardized residuals for model B
plot4 = ggplot(modelB, aes(.fitted, .stdresid)) +
geom_point(pch = 21) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_smooth(se = FALSE, col = "red", size = 0.5, method = "loess") +
labs(x = "Fitted values", y = "Standardized residuals",
title = "Fitted values vs. standardized residuals for model B")
plot1
plot1
plot2
plot3
plot4
plot1
plot2
plot3
plot4
qq_plot_A
library(ggplot2)
library(grid)
# Setting up a linear regression model for each of the response variables
model_A = lm(formula = price ~ carat + cut + color + clarity +
depth + table + xx + yy + zz, data=dtrain)
model_B = lm(formula = logprice ~ carat + cut + color + clarity +
depth + table + xx + yy + zz, data=dtrain)
# Creating QQ-plot for model A
qq_plot_A = ggplot(model_A, aes(sample = .stdresid)) +
stat_qq(pch = 19) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +
labs(x = "Theoretical quantiles", y = "Standardized residuals",
title = "Normal Q-Q plot for model A")
# Creating QQ-plot for model B
qq_plot_B = ggplot(model_B, aes(sample = .stdresid)) +
stat_qq(pch = 19) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +
labs(x = "Theoretical quantiles", y = "Standardized residuals",
title = "Normal Q-Q plot for model B")
# Plotting the fitted values vs. standardized residuals for model A
res_plot_A = ggplot(model_A, aes(.fitted, .stdresid)) +
geom_point(pch = 21) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_smooth(se = FALSE, col = "red", size = 0.5, method = "loess") +
labs(x = "Fitted values", y = "Standardized residuals",
title = "Fitted values vs. standardized \n residuals for model A")
# Plotting the fitted values vs. standardized residuals for model B
res_plot_B = ggplot(model_B, aes(.fitted, .stdresid)) +
geom_point(pch = 21) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_smooth(se = FALSE, col = "red", size = 0.5, method = "loess") +
labs(x = "Fitted values", y = "Standardized residuals",
title = "Fitted values vs. standardized \n residuals for model B")
qq_plot_A
qq_plot_B
res_plot_A
res_plot_B
library(ggplot2)
library(grid)
# Setting up a linear regression model for each of the response variables
model_A = lm(formula = price ~ logcarat + carat + cut + color +
clarity + depth + table + xx + yy + zz, data=dtrain)
model_B = lm(formula = logprice ~ logcarat + carat + cut + color +
clarity + depth + table + xx + yy + zz, data=dtrain)
# Creating QQ-plot for model A
qq_plot_A = ggplot(model_A, aes(sample = .stdresid)) +
stat_qq(pch = 19) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +
labs(x = "Theoretical quantiles", y = "Standardized residuals",
title = "Normal Q-Q plot for model A")
# Creating QQ-plot for model B
qq_plot_B = ggplot(model_B, aes(sample = .stdresid)) +
stat_qq(pch = 19) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +
labs(x = "Theoretical quantiles", y = "Standardized residuals",
title = "Normal Q-Q plot for model B")
# Plotting the fitted values vs. standardized residuals for model A
res_plot_A = ggplot(model_A, aes(.fitted, .stdresid)) +
geom_point(pch = 21) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_smooth(se = FALSE, col = "red", size = 0.5, method = "loess") +
labs(x = "Fitted values", y = "Standardized residuals",
title = "Fitted values vs. standardized \n residuals for model A")
# Plotting the fitted values vs. standardized residuals for model B
res_plot_B = ggplot(model_B, aes(.fitted, .stdresid)) +
geom_point(pch = 21) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_smooth(se = FALSE, col = "red", size = 0.5, method = "loess") +
labs(x = "Fitted values", y = "Standardized residuals",
title = "Fitted values vs. standardized \n residuals for model B")
qq_plot_A
qq_plot_B
res_plot_A
res_plot_B
plot(dtrain$carat, dtrain$logprice, xlab="Carat", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$logcarat, dtrain$logprice, xlab="log(carat)", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$color, dtrain$logprice, xlab="color", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$clarity, dtrain$logprice, xlab="clarity", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$cut, dtrain$logprice, xlab="cut", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$carat, dtrain$logprice, xlab="Carat", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$logcarat, dtrain$logprice, xlab="log(carat)", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$color, dtrain$logprice, xlab="color", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$clarity, dtrain$logprice, xlab="clarity", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$cut, dtrain$logprice, xlab="cut", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$carat, dtrain$logprice, xlab="Carat", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$logcarat, dtrain$logprice, xlab="log(carat)", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$color, dtrain$logprice, xlab="color", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$clarity, dtrain$logprice, xlab="clarity", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$cut, dtrain$logprice, xlab="cut", ylab="log(price)",
main="Diamonds data set")
?boxplot
plot(dtrain$carat, dtrain$logprice, xlab="Carat", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$logcarat, dtrain$logprice, xlab="log(carat)", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$color, dtrain$logprice, xlab="color", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$clarity, dtrain$logprice, xlab="clarity", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$cut, dtrain$logprice, xlab="cut", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$color, dtrain$price, xlab="color", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$carat, dtrain$logprice, xlab="Carat", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$logcarat, dtrain$logprice, xlab="log(carat)", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$color, dtrain$logprice, xlab="color", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$clarity, dtrain$logprice, xlab="clarity", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$cut, dtrain$logprice, xlab="cut", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$color, dtrain$price, xlab="color", ylab="price",
main="Diamonds data set")
plot(dtrain$carat, dtrain$logprice, xlab="Carat", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$logcarat, dtrain$logprice, xlab="log(carat)", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$color, dtrain$logprice, xlab="color", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$clarity, dtrain$logprice, xlab="clarity", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$cut, dtrain$logprice, xlab="cut", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$carat, dtrain$logprice, xlab="Carat", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$logcarat, dtrain$logprice, xlab="log(carat)", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$color, dtrain$logprice, xlab="color", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$clarity, dtrain$logprice, xlab="clarity", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$cut, dtrain$logprice, xlab="cut", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$carat, dtrain$color, xlab="cut", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$carat, dtrain$logprice, xlab="Carat", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$logcarat, dtrain$logprice, xlab="log(carat)", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$color, dtrain$logprice, xlab="color", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$clarity, dtrain$logprice, xlab="clarity", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$cut, dtrain$logprice, xlab="cut", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$color, dtrain$carat, xlab="cut", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$carat, dtrain$logprice, xlab="Carat", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$logcarat, dtrain$logprice, xlab="log(carat)", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$color, dtrain$logprice, xlab="color", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$clarity, dtrain$logprice, xlab="clarity", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$cut, dtrain$logprice, xlab="cut", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$color, dtrain$carat, xlab="cut", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$clarity, dtrain$carat, xlab="cut", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$carat, dtrain$logprice, xlab="Carat", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$logcarat, dtrain$logprice, xlab="log(carat)", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$color, dtrain$logprice, xlab="color", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$clarity, dtrain$logprice, xlab="clarity", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$cut, dtrain$logprice, xlab="cut", ylab="log(price)",
main="Diamonds data set")
?loess
# R uses the tricubic kernel for weighting as default, hence weights is unspecified
fit = loess(formula = logprice ~ carat, degree=2, data=dtrain, span=0.2)
# R uses the tricubic kernel for weighting as default, hence weights is unspecified
fit = loess(formula = logprice ~ carat, degree=2, data=dtrain, span=0.2)
Plot(fit, main = "Local Regression")
# R uses the tricubic kernel for weighting as default, hence weights is unspecified
fit = loess(formula = logprice ~ carat, degree=2, data=dtrain, span=0.2)
plot(fit, main = "Local Regression")
# R uses the tricubic kernel for weighting as default, hence weights is unspecified
local_regressor = loess(formula = logprice ~ carat, degree=2, data=dtrain, span=0.2)
x0 = 1
logprice_prediction = predict(local_regressor, x0)
View(qq_plot_B)
# R uses the tricubic kernel for weighting as default, hence the weights parameter is unspecified
local_regressor = loess(formula = logprice ~ carat, degree=2, data=dtrain, span=0.2)
x0 = 1
logprice_prediction = predict(local_regressor, x0)
plot(local_regressor)
# R uses the tricubic kernel for weighting as default, hence the weights parameter is unspecified
local_regressor = loess(formula = logprice ~ carat, degree=2, data=dtrain, span=0.2)
x0 = 1
logprice_prediction = predict(local_regressor, x0)
x0 = 1
# R uses the tricubic kernel for weighting as default, hence the weights parameter is unspecified
local_regressor = loess(formula = logprice ~ carat, degree=2, data=dtrain, span=0.2)
logprice_prediction = predict(local_regressor, x0)
View(qq_plot_B)
x0 = 1
# R uses the tricubic kernel for weighting as default, hence the weights parameter is unspecified
local_regressor = loess(formula = logprice ~ carat, degree=2, data=dtrain, span=0.2)
logprice_prediction = predict(local_regressor, x0)
price_prediction = 10^logprice_prediction
plot(dtrain$carat, dtrain$logprice, xlab="Carat", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$logcarat, dtrain$logprice, xlab="log(carat)", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$color, dtrain$logprice, xlab="color", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$clarity, dtrain$logprice, xlab="clarity", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$cut, dtrain$logprice, xlab="cut", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$carat, dtrain$price, xlab="cut", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$carat, dtrain$logprice, xlab="Carat", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$logcarat, dtrain$logprice, xlab="log(carat)", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$color, dtrain$logprice, xlab="color", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$clarity, dtrain$logprice, xlab="clarity", ylab="log(price)",
main="Diamonds data set")
plot(dtrain$cut, dtrain$logprice, xlab="cut", ylab="log(price)",
main="Diamonds data set")
x0 = 1
# R uses the tricubic kernel for weighting as default, hence the weights parameter is unspecified
local_regressor = loess(formula = logprice ~ carat, degree=2, data=dtrain, span=0.2)
logprice_prediction = predict(local_regressor, x0)
price_prediction = 10^logprice_prediction
